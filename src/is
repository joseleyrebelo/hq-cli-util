#!/bin/zsh

# IS (1/2)

is__set(){
	[[ "$1" != "" ]] && return 0 || return 1
}

is__equal() {
	ensure__n_args 2 $@
	[[ "$1" == "$2" ]] && return 0 || return 1
}

is__bigger() {
	[[ $1 -gt $2 ]] && return 0 || return 1
}

is__file() {
	[[ -f $1 ]] && return 0 || return 1
}

is__dir(){
	[[ -d $1 ]] && return 0 || return 1
}


is__n_args() {
	# This is a readability and dry-helper function, it's not
	# optimized for performance. Approached from a bash utilitarian
	# priciple. Please note:
	# - The 1st argument is the size of args expected
	# - The remaining args are arbitrary; and ultimately represent 
	# the amount of variables this function will check against. Such
	# that it will be total of received args on this function call 
	# minus one.
	local args_n=$(( $# - 1 )) 
	# TODO - organize/continue documentation
	local target=$1 # $1 gets the target size
	(( args_n == target )) && return 0 || return 1
	# - DOC (( - Returns the logical result of the operation it wraps in
	# this instance.
}

is__min_args() {
	local target=$1
	local args_n=$(( $# - 1 ))
	[ $args_n -ge $1 ] && return 0 || return 1
}

is__args_n_range () {
	#TAIL - create this function to connect to importer requirment
	# - PRoceed to fix importer file to allow two args 
	# >> Perhaps you want a min type situation instead of a set range ??
	# - - The idea here seems to be to limit the max of args as a performance matter ?? Overkill ?
	# - -  This applies well to importer because it should inform the user of the importer if unnecessary args are added.
	# - inally this will allow importer to import misc/general to hqconf (requiring system__echo_or_not )
	# - this cause currently running "yarnlocal react-spots" in react-froms causes issues
}

# ISN'T - Negation of previos is_... functions 

isnt__n_args() {
	is__n_args "$@"; (( $? )) && return 1 || return 0
}

isnt__min_args() {
	is__min_args "$@"; (( $? )) && return 1 || return 0
}


